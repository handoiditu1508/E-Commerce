@model IEnumerable<ProductTypeView>

@{ECommerceService eCommerce = (ECommerceService)ViewData[GlobalViewBagKeys.ECommerceService]; }

<div class="table-responsive rounded">
	<table class="table table-striped table-bordered table-hover table-condensed table-sm table-secondary table-active">
		<thead class="thead-dark">
			<tr>
				<th class="w-25"></th>
				<th>Product Type</th>
			</tr>
		</thead>
		<tbody>
			@foreach (ProductTypeView productType in Model)
			{
				ProductView product = eCommerce.GetRepresentativeProduct(productType.Id);
				if (product == null)
				{
					product=new ProductView
					{
						ProductTypeName=productType.Name,
						ProductTypeId=productType.Id
					};
				}
				<tr class="productTypeRow">
					<td>
					@if (product.RepresentativeImage != null)
					{
						<img class="img-fluid rounded" src="@($"{UIConsts.GetProductUrlById(product.SellerId, product.ProductTypeId)}/{product.RepresentativeImage}")" alt="@product.ProductTypeName" />
					}
					else
					{
						<img class="img-fluid rounded" src="~/images/sample.png" alt="@product.ProductTypeName" />
					}
						<a asp-action="@ViewBag.Action" asp-controller="@ViewBag.Controller" asp-route-productTypeId="@product.ProductTypeId" class="btn btn-danger">Choose</a>
					</td>
					<td>
						<h4>@product.ProductTypeName</h4>
						<p>
							descriptions descriptions descriptions descriptions descriptions descriptions descriptions descriptions descriptions descriptions descriptions descriptions descriptions descriptions descriptions descriptions descriptions descriptions descriptions descriptions descriptions descriptions descriptions descriptions
						</p>
						@{ 
							int categoryId = eCommerce.GetProductTypeBy(product.ProductTypeId).CategoryId;
							<small>
								@await Component.InvokeAsync("CategoryBreadCrumb", new { categoryId })
							</small>
						}
					</td>
				</tr>
			}
		</tbody>
	</table>
</div>