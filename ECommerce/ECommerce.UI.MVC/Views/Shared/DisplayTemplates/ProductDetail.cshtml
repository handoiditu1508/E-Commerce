@model ProductView

@{ECommerceService eCommerce = (ECommerceService)ViewData[GlobalViewBagKeys.ECommerceService];}

<input type="hidden" id="sellerId" value="@Model.SellerId" />
<input type="hidden" id="productTypeId" value="@Model.ProductTypeId" />

<div class="container">
	<div class="card productDetailCard">
		<div class="container-fliud">
			<div class="wrapper row">
				<div class="preview col-md-6">
					<div id="galleryResult" class="preview-pic tab-content">
						<div class="galleryThumbnail">
							<img class="rounded" src="@($"{UIConsts.GetProductUrlById(Model.SellerId, Model.ProductTypeId)}/{Model.RepresentativeImage}")" />
						</div>
					</div>
					<div id="carouselExampleControls" class="preview-thumbnail nav nav-tabs carousel slide" data-ride="carousel" data-interval="false">
						<div class="carousel-inner">
							@{
								IList<string> images = (await eCommerce.GetProductImagesAsync(Model.SellerId, Model.ProductTypeId)).ToList();
								short count = 1;
								TagBuilder container = new TagBuilder("div");
								TagBuilder carouselItem = new TagBuilder("div");
								carouselItem.AddCssClass("carousel-item active");
								container.InnerHtml.AppendHtml(carouselItem);
								foreach (string image in images)
								{
									carouselItem.InnerHtml
										.AppendHtml($"<div class=\"galleryThumbnail\"><img class=\"rounded m-auto mw-100 mh-100\" src=\"{UIConsts.GetProductUrlById(Model.SellerId, Model.ProductTypeId)}/{image}\" /></div>");
									if (count % 5 == 0 && count < images.Count())
									{
										carouselItem = new TagBuilder("div");
										carouselItem.AddCssClass("carousel-item");
										container.InnerHtml.AppendHtml(carouselItem);
									}
									count++;
								}
							}
							@container.InnerHtml
						</div>
						<a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-slide="prev">
							<span class="carousel-control-prev-icon" aria-hidden="true"></span>
							<span class="sr-only">Previous</span>
						</a>
						<a class="carousel-control-next" href="#carouselExampleControls" role="button" data-slide="next">
							<span class="carousel-control-next-icon" aria-hidden="true"></span>
							<span class="sr-only">Next</span>
						</a>
					</div>
				</div>
				<div class="details col-md-6">
					<h3><a asp-action="ProductType" asp-controller="Product" asp-route-productTypeId="@Model.ProductTypeId" class="font-weight-bold text-uppercase">@Model.ProductTypeName</a></h3>
					<div>
						<div>
							<span class="fa fa-star checked"></span>
							<span class="fa fa-star checked"></span>
							<span class="fa fa-star checked"></span>
							<span class="fa fa-star"></span>
							<span class="fa fa-star"></span>
						</div>
						<span>41 reviews</span>
					</div>
					<p>Suspendisse quos? Tempus cras iure temporibus? Eu laudantium cubilia sem sem! Repudiandae et! Massa senectus enim minim sociosqu delectus posuere.</p>
					<h4 class="font-weight-bold text-uppercase">current price: <span class="text-warning">@CurrencyFormat.FormatWithUnit(Model.Price)</span></h4>
					<h4 class="font-weight-bold text-uppercase">SELLER: <a class="text-primary" asp-action="Seller" asp-controller="Product" asp-route-sellerId="@Model.SellerId">@Model.SellerName</a></h4>
					<p class="vote"><strong>91%</strong> of buyers enjoyed this product! <strong>(87 votes)</strong></p>
					<form asp-action="AddToCart" asp-controller="Cart" method="post" class="addToCartOnSubmit">
						@{
							var attributes = (await eCommerce.GetProductAttributesAsync(Model.SellerId, Model.ProductTypeId));
							foreach (var attribute in attributes)
							{
								<h5 class="font-weight-bold text-uppercase">
									@attribute.Key:
									@foreach (var value in attribute.Value)
									{
										<label class="radio-inline text-info">
											<input type="radio" name="attributes[@attribute.Key]" value="@value" /> @value
										</label>
									}
								</h5>
							}
						}
						<div class="form-row">
							<div class="form-group col-md-3">
								<input class="form-control" type="number" name="quantity" value="1" />
							</div>
						</div>
						<input type="hidden" name="sellerId" value="@Model.SellerId" />
						<input type="hidden" name="productTypeId" value="@Model.ProductTypeId" />
						<div>
							<input class="btn btn-lg btn-success" type="submit" value="Add to Cart" />
							<button class="btn btn-lg btn-danger" type="button"><i class="fa fa-heart"></i></button>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>
</div>

<script type="text/javascript">
	$(document).ready(function () {

		//small cart updating
		function updateSmallCart() {
			$.ajax({
				url: $('#cartTotalQuantityUrl').val(),
				type: $('#cartTotalQuantityUrl').attr("urlMethod"),
				success: function (result) {
					$('#cartQuantity').html(result);
				}
			});
		}

		$('.addToCartOnSubmit').submit(
			function (event) {
				// Stop form from submitting normally
				event.preventDefault();
				var $form = $(this);
				$.ajax({
					url: $form.attr('action'),
					type: $form.attr('method'),
					data: $form.serialize(),
					success: function () {
						updateSmallCart();
					},
					error: function (result) {
						showErrors(['Something went wrong while adding to cart', JSON.stringify(result)]);
					}
				});
			});

		//product detail pics
		$('.galleryThumbnail').click(function () {
			$('#galleryResult').html($(this).clone());
		});

		//control product attributes states
		/*let attributeKeys = ["gender", "color", "size"];*/
		let attributeKeys;

		/*
		let attributes = {
    		gender: ["male", "female", "other"],
			color: ["red", "blue", "green"],
			size: ["s", "m", "l"]
		};*/
		let attributes;

		/*
		let attributesStates = [
    		{gender: "male", color: "green", size: "l"},
			{gender: "male", color: "green", size: "s"},
			{gender: "male", color: "blue", size: "l"},
			{gender: "male", color: "blue", size: "m"},
			{gender: "male", color: "red", size: "m"},
			{gender: "male", color: "red", size: "s"},
			{gender: "female", color: "red", size: "s"},
			{gender: "female", color: "red", size: "l"},
			{gender: "female", color: "red", size: "m"},
			{gender: "female", color: "green", size: "s"},
			{gender: "female", color: "green", size: "l"},
			{gender: "female", color: "green", size: "m"},
			{gender: "other", color: "blue", size: "m"},
			{gender: "other", color: "blue", size: "l"},
		];*/
		let attributesStates;

		//get selector for jquery that select attributes by name
		function getSelectorString(name) {
			return "input[name^='attributes[" + name + "']";
		}

		//get selector for jquery that select attributes
		function getSelectorStringAll() {
			return "input[name^='attributes[']";
		}

		//initiate attributes container variables
		function loadVariables() {
			attributeKeys = [];
			attributes = {};
			attributesStates = [];

			let sellerId = $('#sellerId').val();
			let productTypeId = $('#productTypeId').val();

			let executeCheckFirstNext = false;
			//initiate attributes from server
			$.ajax({
				url: $('#getProductAttributesUrl').val(),
				type: $('#getProductAttributesUrl').attr("urlMethod"),
				data: {
					sellerId: sellerId,
					productTypeId: productTypeId
				},
				success: function (result) {
					if (executeCheckFirstNext) {
						attributes = result;
						//initiate attributeKeys from attributes's properties name
						for (prop in attributes) {
							if (Object.prototype.hasOwnProperty.call(attributes, prop)) {
								attributeKeys.push(prop);
							}
						}

						checkFirst();
					}
					else {
						executeCheckFirstNext = true;

						attributes = result;
						//initiate attributeKeys from attributes's properties name
						for (prop in attributes) {
							if (Object.prototype.hasOwnProperty.call(attributes, prop)) {
								attributeKeys.push(prop);
							}
						}
					}
				},
				error: function (result) {
					showErrors(['Something went wrong while loading attributes', JSON.stringify(result)]);
				}
			});

			//initiate attributesStates from server
			$.ajax({
				url: $('#getProductAttributesStatesUrl').val(),
				type: $('#getProductAttributesStatesUrl').attr("urlMethod"),
				data: {
					sellerId: sellerId,
					productTypeId: productTypeId
				},
				success: function (result) {
					if (executeCheckFirstNext) {
						attributesStates = result;
						checkFirst();
					}
					else {
						executeCheckFirstNext = true;
						attributesStates = result;
					}
				},
				error: function (result) {
					showErrors(['Something went wrong while loading attributes states', JSON.stringify(result)]);
				}
			});
		}

		//get index of name in attributeKeys
		function getAttributeKeysIndexByName(name) {
			for(i = 0; i < attributeKeys.length; i++) {
				if(attributeKeys[i] == name) {
					return i;
				}
			}
			return -1;
		}

		//after check the an attribute call this function to reconfig other attributes
		//keyName is the Name of the attribute. ex: gender, color, size
		function configAttributesAfterChecked(keyName) {
			disableFromIndex(getAttributeKeysIndexByName(keyName) + 1);

			let shrinkingArray = attributesStates;
			let found = false;
			for (i = 0; i < attributeKeys.length; i++) {
				let prop = attributeKeys[i];
			
				if(keyName == prop) {
					found = true;
				}
				else if (found) {
					unCheckName(prop);
					for(j = 0; j < shrinkingArray.length; j++) {
						let slctor = $(getSelectorString(prop)+"[value='"+shrinkingArray[j][prop]+"']");
						slctor.prop('checked', true);
						slctor.prop('disabled', false);
					}
				}
			
				let chcked = getChecked(prop);
				shrinkingArray = shrinkingArray.filter(attr => attr[prop] == chcked);
			}
		}

		//check the valid default attributes state
		function checkFirst() {
			if(attributeKeys == null || attributeKeys.length < 1 && attributesStates == null && attributesStates.length < 1)
				return;

			let prop = attributeKeys[0];
			disableName(prop);
			for(i = 0; i < attributesStates.length; i++)
			{
				let slctor = $(getSelectorString(prop)+"[value='"+attributesStates[i][prop]+"']");
				slctor.prop('checked', true);
				slctor.prop('disabled', false);
			}
			$(getSelectorString(attributeKeys[0]) + "[value='" + attributesStates[0][attributeKeys[0]] + "']").prop('checked', true);
		
			configAttributesAfterChecked(attributeKeys[0]);
		}

		//uncheck attribute by name. ex: gender, color, size
		function unCheckName(name) {
			$(getSelectorString(name)).prop('checked', false);
		}

		//uncheck all attributes
		function unCheckAll() {
			$(getSelectorStringAll()).prop('checked', false);
		}

		//disable all attributes
		function disableAll() {
    		$(getSelectorStringAll()).prop('disabled', true);
		}

		//disable attributes by name
		function disableName(name) {
			$(getSelectorString(name)).prop('disabled', true);
		}

		//disable attributes from index base on attributeKeys index
		function disableFromIndex(index) {
			for(i = index; i < attributeKeys.length; i++) {
				$(getSelectorString(attributeKeys[i])).prop('disabled', true);
			}
		}

		//enable attribute by name. ex: gender, color, size
		function enableName(name) {
    		$(getSelectorString(name)).prop('disabled', false);
		}

		//input = "attributes[gender]"
		//output = "gender"
		function getKeyName(str) {
    		return str.substring(str.indexOf("[") + 1, str.length - 1);
		}

		//get value from the checked attribute by name
		//ex: name = "color". Value can be on of: red, green, blue
		function getChecked(name) {
			return $(getSelectorString(name) + ':checked').val();
		}

		//execute when attribute is checked
		$(getSelectorStringAll()).change(function(event) {
    		if(!this.checked)
        		return;
		
			configAttributesAfterChecked(getKeyName(this.name));
		});

		//perform functions
		loadVariables();
	});
</script>