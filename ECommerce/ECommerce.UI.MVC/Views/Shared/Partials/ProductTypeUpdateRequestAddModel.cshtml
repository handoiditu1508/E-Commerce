@model ProductTypeUpdateRequestAddModel

@{
//required: category-picker.js(from CategoriesPickerDropDown ViewComponent)
}

<input asp-for="ProductTypeId" type="hidden" />
<div class="form-row">
	<div class="form-group col-md-4">
		<h2><label asp-for="Name" class="control-label text-lg-left"></label></h2>
		<input asp-for="Name" class="form-control" />
		<span asp-validation-for="Name" class="text-danger"></span>
	</div>
</div>
<div class="categoryPickerContainer">
	<div class="form-row">
		<div class="form-group col-md-12">
			<h2><label asp-for="CategoryId" class="control-label"></label></h2>
			<button class="clearCategoryPicking" type="button" class="btn btn-danger btn-sm">X</button>
			<input class="categoryHiddenPickingResult" type="hidden" asp-for="CategoryId" class="form-control" />
			<div class="categoryPickingResult">
				@if (Model.CategoryId != null)
				{
					<vc:category-bread-crumb category-id="(int)Model.CategoryId"></vc:category-bread-crumb>
				}
			</div>
		</div>
	</div>
	@await Component.InvokeAsync("CategoriesPickerDropDown", new { additionalCssClass = "btn btn-success" })
</div>
<div class="form-row">
	<div class="form-group col-md-12">
		<h2><label asp-for="Descriptions" class="control-label"></label></h2>
		<textarea asp-for="Descriptions" class="form-control" placeholder="update descriptions"></textarea>
		<span asp-validation-for="Descriptions" class="text-danger"></span>
	</div>
</div>