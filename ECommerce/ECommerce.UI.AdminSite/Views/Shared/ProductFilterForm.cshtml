@model ProductSearchViewModel

<form action="@Model.Url" method="get">
	<div asp-validation-summary="All" class="text-danger"></div>

	@if(Model.ShowSearchString)
	{
	<div class="form-group">
		<div class="input-group">
			<div class="input-group-prepend">
				<label asp-for="SearchModel.SearchString" class="control-label input-group-text"></label>
			</div>
			<input name="searchString" asp-for="SearchModel.SearchString" class="form-control" />
		</div>
		<span asp-validation-for="SearchModel.SearchString" class="text-danger"></span>
	</div>
	}

	@if(Model.ShowMinimumQuantity)
	{
	<div class="form-group">
		<div class="input-group">
			<div class="input-group-prepend">
				<label asp-for="SearchModel.MinimumQuantity" class="control-label input-group-text"></label>
			</div>
			<input name="minimumQuantity" asp-for="SearchModel.MinimumQuantity" class="form-control" />
		</div>
		<span asp-validation-for="SearchModel.MinimumQuantity" class="text-danger"></span>
	</div>
	}

	@if(Model.ShowPrice)
	{
	<div class="form-group">
		<div class="input-group">
			<div class="input-group-prepend">
				<label asp-for="SearchModel.Price" class="control-label input-group-text"></label>
			</div>
			@if(Model.ShowPriceIndication)
			{
			<select name="priceIndication" class="custom-select">
				@if (Model.SearchModel.PriceIndication == null)
				{
					<option value="-1">Lesser than</option>
					<option value="0">Equal to</option>
					<option value="1">More than</option>
				}
				else
				{
					if (Model.SearchModel.PriceIndication < 0)
					{
						<option selected value="-1">Lesser than</option>
						<option value="0">Equal to</option>
						<option value="1">More than</option>
					}
					else if (Model.SearchModel.PriceIndication > 0)
					{
						<option value="-1">Lesser than</option>
						<option value="0">Equal to</option>
						<option selected value="1">More than</option>
					}
					else
					{
						<option value="-1">Lesser than</option>
						<option selected value="0">Equal to</option>
						<option value="1">More than</option>
					}
				}
			</select>
			}
			<input name="price" asp-for="SearchModel.Price" class="form-control" />
		</div>
		<span asp-validation-for="SearchModel.Price" class="text-danger"></span>
	</div>
	}

	@if(Model.ShowActive)
	{
	<div class="form-group">
		<div class="input-group">
			<div class="input-group-prepend">
				<label asp-for="SearchModel.Active" class="control-label input-group-text"></label>
			</div>
			<select selected-bool-value="@Model.SearchModel.Active" option-label="All" true-label="Active" false-label="Locked" class="form-control" name="active"></select>
		</div>
	</div>
	}

	@if(Model.ShowStatus)
	{
	<div class="form-group">
		<div class="input-group">
			<div class="input-group-prepend">
				<label asp-for="SearchModel.Status" class="control-label input-group-text"></label>
			</div>
			<select class="form-control" name="status" enum-type="Model.SearchModel.Status.GetType()" selected="Model.SearchModel.Status" option-label=""></select>
		</div>
	</div>
	}

	@if(Model.ShowProductTypeStatus)
	{
	<div class="form-group">
		<div class="input-group">
			<div class="input-group-prepend">
				<label asp-for="SearchModel.ProductTypeStatus" class="control-label input-group-text"></label>
			</div>
			<select class="form-control" name="status" enum-type="Model.SearchModel.ProductTypeStatus.GetType()" selected="Model.SearchModel.ProductTypeStatus" option-label=""></select>
		</div>
	</div>
	}

	@if(Model.ShowCategoryId)
	{
	<div class="categoryPickerContainer">
		<div class="form-row categoryPickerContainer">
			<div class="form-group col-md-12">
				<label class="control-label">Category</label>
				<button class="clearCategoryPicking btn btn-danger btn-sm" type="button">X</button>
				<input class="categoryHiddenPickingResult" type="hidden" name="categoryId" value="@Model.SearchModel.CategoryId" />
				<div class="categoryPickingResult">
					@if (Model.SearchModel.CategoryId != null)
					{
						<vc:category-bread-crumb category-id="(int)Model.SearchModel.CategoryId"></vc:category-bread-crumb>
					}
				</div>
			</div>
		</div>
		@await Component.InvokeAsync("CategoriesPickerDropDown", new { additionalCssClass = "btn btn-success" })
	</div>
	}

	<div class="form-group">
		<input type="submit" value="Find" class="btn btn-primary" />
	</div>
</form>

<script type="text/javascript">
$(document).ready(function () {
	//picking category

	$('.categoryPickingButton').click(
		function (event) {
			// Stop form from submitting normally
			event.preventDefault();
			var $btn = $(this);
			var $attr = $btn.find('p[name=\'categoryId\']');

			let container = $(this).closest(".categoryPickerContainer");
			container.find(".categoryHiddenPickingResult").val($attr.html());

			$.ajax({
				url: $('#getCategoryBreadCrumbUrl').val(),
				type: "get",
				data: { categoryId: $attr.html() },
				success: function (result) {
					container.find(".categoryPickingResult").html(result);
				},
				error: function (result) {
					alert('something went wrong while picking category:\n' + result);
				}
			});
		});

	$('.clearCategoryPicking').click(
		function (event) {
			// Stop btn behavior to make form validate it self
			event.preventDefault();

			//clear result of picking category
			let container = $(this).closest(".categoryPickerContainer");
			container.find(".categoryHiddenPickingResult").val('');
			container.find('.categoryPickingResult').html('');
		});
});
</script>